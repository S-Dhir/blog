<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="google-site-verification" content="9icGUqyId7PWkx-IHMlq7fjP2Bc6TMm4EVHuzrDS4pE" />
    <script>
        var loadstart = performance.now();
    </script>
    <meta charset="utf-8">
    <meta name="description" content="a blog for everyone who needs to know about gaming">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Shiven Dhir">

    <title>PC vs Console, what should you buy? | Shiven's blog</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Patrick+Hand&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Fredericka+the+Great&display=swap" rel="stylesheet"><!--Navbar--><!--|font-family: 'Fredericka the Great', cursive;|-->
    <link href="https://fonts.googleapis.com/css2?family=Indie+Flower&display=swap" rel="stylesheet"><!--footer--><!--|font-family: 'Indie Flower', cursive;|-->
    <link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&display=swap" rel="stylesheet"><!--Heading--><!--|font-family: 'Abril Fatface', cursive;|-->
    <link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet"><!--Popup--><!--|font-family: 'Lobster', cursive;|-->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Prompt:wght@300&display=swap" rel="stylesheet"><!--posts--><!--font-family: 'Prompt', sans-serif;-->
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Benne&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="basic_computers.css">
    <link rel="stylesheet" href="../../common_page.css">
    <link rel="shortcut icon" href="../../favicon.ico" type="image/x-icon">

    <script>

    </script>

</head>
<body id="body" style="margin-left: 4%;">
    <div class="nav">
        <ul class="menu">
            <!--Navbar-->
            <li class="nav_list"><a hreflang="en-in" href="../../index.html" class="link_url">Home</a></li>&nbsp;&nbsp;
            <li class="nav_list">|</li>
            <li class="nav_list">
                <details>
                    <summary id="computer_nav">
                        My posts
                    </summary>
                    <a hreflang="en-in" href="#" style="border: ridge; border-radius: 30%; border-color: aquamarine;" class="link_url">
                        Secure your data
                    </a><br>
                    <a hreflang="en-in" href="../basic_computers/basic_computers.htm" style="border: ridge; border-radius: 30%; border-color: aquamarine;" class="link_url">
                        Learn basic computers
                    </a>
                </details>
            </li>
            <li class="nav_list">|</li>
            <li class="nav_list">
                <a hreflang="en-in" href="#" class="link_url" onclick="showform()">
                    Subscribe 
                </a>
            </li>
        </ul>
    </div>

    <br><br><br><br><br><br><br><br><br>
    <h1 style="color: beige; font-size: 5.6vmin;">Console vs PC, what should you take?</h1>
    <h3 style="color: rgb(122, 197, 138);">by Shiven Dhir | Updated 1 July 2021 | 5:34 PM GMT +5:30</h3>
    <p class="post"></p>
    <h2>Shiven, I am confused about what should I game on</h2>
    <p class="post">Many people game on mobile phones I know that. But when it comes to playing powerful games, you need a Console or a PC</p>
    <h2>What do you mean by powerful games?</h2>
    <p class="post">There are some games that do a lot of work simultaneously. So much work is needed to be done in one millisecond that, a Mobile can't handle it. You need something more powerful. Something that can easily do all of this. For that you can take a Console or a gaming PC.</p><br>
    <h2>What are they?</h2>
    <p class="post">Have you heard of the PS5? Or maybe PS4 or the Xbox? You'll probably see some teenagers playing games on them. They'll be hooked up to a TV. They also have a controller or two with them. Those are called gaming consoles. You can google it up to find some images. But due to international copyright laws, I will not put them here. That is called a gaming console. Now do you know desktops? I have a whole article of them <a hreflang="en" href="../basic_computers/basic_computers.htm">here.</a></p>
    <h2>So which one should I take?</h2>
    <p class="post">It depends on what your need is.</p>
    <h2>Console</h2>
    <h3>Advantages:</h3>
    <p class="post">Consoles are easy to pick. You can just pick the most trending one in the market.</p><br>
    <p class="post">Consoles can have more than 8 people play on them at once.</p>
    <p class="post">Consoles have some games that will help work on fitness.</p>
    <h3>Disadvantages:</h3>
    <p class="post">You can not add apps other than the ones in the official store.</p>
    <p class="post">You can only use the official controllers.</p>
    <p class="post"></p>


    <div class="popup_container" style="z-index: 1000000001; background:none; display: none;" id="popup2">
        <i class="fa fa-window-close popupclose" style="font-size: 3vmax;" onclick="popupclose()"></b></i>

        <div class="popup"><!--Comment-->
            
        <h2 class="popup_h3">Hey, why don't you consider subscribing?</h2>
        <p id="error" class="text errorMessage"></p>
        <img src="../../google_logo.png" alt="subscribe with google" class="signin_opt" style="margin: auto; display: block; cursor: pointer; background: none; width: 45%;" onclick="signingoogle()">
            
        <h3 style="text-align: center;" class="popup_h3">OR</h3>
            
        <input type="email" id="email_holder" placeholder="Enter your email here" onsearch="signinemail(document.getElementById('email_holder').value)" class="input"><br>
            
        <button onclick="signinemail(document.getElementById('email_holder').value)" class="enter_email"><i class="material-icons">&#xe0be;</b></i><div style="font-size: 2vw;">&nbsp;Subscribe with email</div></button>
            
                
        </div>

    </div>
    <br><br><br><br><br><br><br>
    <div class="footer" id="footer">
            <p class="text">
            <a href="posts/basic_computers/basic_computers.htm" class="text_url" style="text-decoration: underline;">Check out my latest post</a>
            <a href="https://github.com/S-Dhir/blog" class="text_url" style="text-decoration: underline;">See the source code on github</a>
            <a href="/about.html" class="text_url" style="text-decoration: underline;">About me</a>
            <a href="#" class="text_url" style="text-decoration: underline;">Back to top</a>
            <i class="material-icons footer_arrow" style="left: 40%;" onclick="scrollrtxce();" id="arrow">keyboard_arrow_down</b></i>
        </p>   
    
    </div>
    <h1 style="text-align: center; color: rgb(108, 219, 210);">Comments</h1>
    
    <div id="comments">
        <img src="../../loading.gif" alt="none" style="width: 30%;">
    </div>

    <div style="background-color: aqua; display: none;" id="Comment_box">
        <img src="../../loading.gif" alt="" id="userpic" style="width: 32px;">
        <p id="username" style="display: inline;">commenting as:</p>
        <input class="inpcmnt" type="search" id="comment" onsearch="comment(document.getElementById('comment').value)" style="width: 100%;" placeholder="Add a comment"></input> 
    </div>
    <button onclick="comment(document.getElementById('comment').value)" style="font-size: 4vmin;">Comment</button>
    <p id="subscribed" style="font-size: 5vmin; color: #c51ddb;"> You must subscribe to comment</p>
    <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
    <script src="../../common.js"></script>
    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-app.js"></script>

    <!-- TODO: Add SDKs for Firebase products that you want to use
        https://firebase.google.com/docs/web/setup#available-libraries -->
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-analytics.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-performance.js"></script>
    <!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-4J1X0XP8WZ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-4J1X0XP8WZ');
</script>
    <script>
        const currentdoc = "encoder"
    var run = true;
        // Your web app's Firebase configuration
        // For Firebase JS SDK v7.20.0 and later, measurementId is optional
        var firebaseConfig = {
            apiKey: "AIzaSyCdRFuXHIiuxwCiE3gbTxcPmx5iETiX4xQ",
            authDomain: "blog-47049.firebaseapp.com",
            projectId: "blog-47049",
            storageBucket: "blog-47049.appspot.com",
            messagingSenderId: "552440753588",
            appId: "1:552440753588:web:9f8781871e2e6fd454d6e1",
            measurementId: "G-4J1X0XP8WZ"
        };
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        firebase.analytics();
        var perf = firebase.performance();
        var db = firebase.firestore();
        function signingoogle() {
            let provider = new firebase.auth.GoogleAuthProvider();
            firebase.auth().signInWithRedirect(provider);
        }
        
        firebase.auth().onAuthStateChanged((user) => {
            if (user) {/**/
                //getting user country

                document.getElementById("subscribed").style.display='none';
                document.getElementById('Comment_box').style.display="";
                // User is signed in, see docs for a list of available properties
                // https://firebase.google.com/docs/reference/js/firebase.User
                var uid = user.uid;
                document.getElementById("username").innerHTML="commenting as: "+firebase.auth().currentUser.displayName;
                if (firebase.auth().currentUser.photoURL != null) {
                    document.getElementById("userpic").src=firebase.auth().currentUser.photoURL;
                } else {
                    document.getElementById("userpic").src='https://firebasestorage.googleapis.com/v0/b/blog-47049.appspot.com/o/pfp%2Fnot-logged-in-32.png?alt=media';
                }
                
                var request = new XMLHttpRequest();

                request.open('GET', 'https://api.ipdata.co/?api-key=ede89dc30d13b64062b68d4003e29491647c3c42c209c0444fe9f519');

                request.setRequestHeader('Accept', 'application/json');
                var time = new Date();
                request.onreadystatechange = function () {
                if (this.readyState === 4) {
                    var userCountry=this.responseText;
                    var userCountry=JSON.parse(userCountry);
                    console.log(time.toUTCString());
                    db.collection("users").doc(firebase.auth().currentUser.email).set({
                        country: userCountry.country_name,
                        name: firebase.auth().currentUser.displayName,
                        uid: firebase.auth().currentUser.uid,
                        provider: firebase.auth().provider,
                        singed: time
                    })
                    .then(() => {
                        var qoejnjiwnefihbhnqfhibqihfbqjiwfnqejiinfquinfieqbnfiqefnqinfiqjnfqjijnfqiwjnfqijnfqinfiqjw;
                    })
                    .catch((error) => {
                        console.log(error);
                    });
                    
                }
                };
                request.send();
                
                
            } else {
                // User is signed out
                // ...
            }
        });

        function signinemail(email) {
            var actionCodeSettings = {
                // URL you want to redirect back to. The domain (www.example.com) for this
                // URL must be in the authorized domains list in the Firebase Console.
                url: 'https://s-dhir.github.io/blog',
                // This must be true.
                handleCodeInApp: true,
                iOS: {
                    bundleId: 'com.example.ios'
                },
                android: {
                    packageName: 'com.example.android',
                    installApp: true,
                    minimumVersion: '12'
                },
                dynamicLinkDomain: 'dhir.page.link'
            };
            firebase.auth().sendSignInLinkToEmail(email, actionCodeSettings)
                .then(() => {
                    // The link was successfully sent. Inform the user.
                    // Save the email locally so you don't need to ask the user for it again
                    // if they open the link on the same device.
                    let cname, cvalue, exdays;
                    cname="email";
                    cvalue=email;
                    exdays=3;
                    var d = new Date();
                    d.setTime(d.getTime() + (exdays*24*60*60*1000));
                    var expires = "expires="+ d.toUTCString();
                    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
                    window.localStorage.setItem('emailForSignIn', email);
                    console.log(email);
                    // ...
                })
                .catch((error) => {
                    var errorCode = error.code;
                    var errorMessage = error.message;
                    console.log(errorCode);
                    console.log(errorMessage);
                    document.getElementById("error").innerHTML=errorMessage;

                    // ...
                });
                // Confirm the link is a sign-in with email link.
                if (firebase.auth().isSignInWithEmailLink(window.location.href)) {
                    // Additional state parameters can also be passed via URL.
                    // This can be used to continue the user's intended action before triggering
                    // the sign-in operation.
                    // Get the email if available. This should be available if the user completes
                    // the flow on the same device where they started it.
                    
                    var email = window.localStorage.getItem('emailForSignIn');
                    if (firebase.auth().currentUser==null) {
                        // User opened the link on a different device. To prevent session fixation
                        // attacks, ask the user to provide the associated email again. For example:
                        email = window.prompt('Please provide your email for confirmation');
                    }
                    // The client SDK will parse the code from the link for you.
                    firebase.auth().signInWithEmailLink(email, window.location.href)
                        .then((result) => {
                        // Clear email from storage.
                        window.localStorage.removeItem('emailForSignIn');
                        console.log(firebase.auth().credential);
                        console.log(firebase.auth().currentUser)
                        // You can access the new user via result.user
                        // Additional user info profile not available via:
                        // result.additionalUserInfo.profile == null
                        // You can check if the user is new or existing:
                        // result.additionalUserInfo.isNewUser
                        })
                        .catch((error) => {
                        // Some error occurred, you can inspect the code: error.code
                        // Common errors could be invalid email and invalid or expired OTPs.
                        });
                }   
                
        }

        // Confirm the link is a sign-in with email link.
        if (firebase.auth().isSignInWithEmailLink(window.location.href)) {
        // Additional state parameters can also be passed via URL.
        // This can be used to continue the user's intended action before triggering
        // the sign-in operation.
        // Get the email if available. This should be available if the user completes
        // the flow on the same device where they started it.
        var email = window.localStorage.getItem('emailForSignIn');
        if (!email) {
            // User opened the link on a different device. To prevent session fixation
            // attacks, ask the user to provide the associated email again. For example:
            email = window.prompt('Please provide your email for confirmation');
        }
        // The client SDK will parse the code from the link for you.
        firebase.auth().signInWithEmailLink(email, window.location.href)
            .then((result) => {
            // Clear email from storage.
            window.localStorage.removeItem('emailForSignIn');
            // You can access the new user via result.user
            // Additional user info profile not available via:
            // result.additionalUserInfo.profile == null
            // You can check if the user is new or existing:
            // result.additionalUserInfo.isNewUser
            })
            .catch((error) => {
            // Some error occurred, you can inspect the code: error.code
            // Common errors could be invalid email and invalid or expired OTPs.
            });
        }
        firebase.auth()
            .getRedirectResult()
            .then((result) => {
                if (result.credential) {
                /** @type {firebase.auth.OAuthCredential} */
                var credential = result.credential;
                console.log("credential:"+credential)
                // This gives you a Google Access Token. You can use it to access the Google API.
                var token = credential.accessToken;
                console.log("token:"+token)
                // ...
                }
                // The signed-in user info.
                var user = result.user;
                console.log(user.photoURL);
                sleep(500, function()
                {
                    console.log('1');
                    sleep(500, function()
                    {
                        console.log('2');
                        console.log(firebase.auth().currentUser);
                        if (firebase.auth().currentUser==null) {
                            console.log(firebase.auth().currentUser)
                            document.getElementById("popup").style.display="initial";
                            document.getElementById("popup2").style.display="initial";
                        }
                        else {
                            console.log(firebase.auth())
                            document.getElementById("popup").style.display="none";
                            document.getElementById("popup2").style.display="none"; 
                        }
                    })
                })
            }).catch((error) => {
                // Handle Errors here.
                var errorCode = error.code;
                var errorMessage = error.message;
                // The email of the user's account used.
                var email = error.email;
                // The firebase.auth.AuthCredential type that was used.
                var credential = error.credential;
                // ...
            });
            function remove() {
                let user = firebase.auth().currentUser;
                user.delete().then(() => {
                console.log("deleted");
                }).catch((error) => {
                console.log("error:");
                console.log(error);
                });
            }
    </script>
    <script>
        function month(number){
            var month= [null,"January","February","March","April","May","June","July",
            "August","September","October","November","December"];
            return month[parseInt(number)];
        }
        var docRef;
        db.collection(currentdoc).get().then((doc) => {
            document.getElementById("comments").innerHTML="";
            const doclength = doc.docs.length;
            for (let iok=1; (iok<(doclength+1));) {
                db.collection(currentdoc).doc("C" + iok)
                .get().then((doc) => {
                    if (doc.exists) {
                        console.log(doc.data());
                        var recieve=doc.data();
                        
                        document.getElementById("comments").innerHTML=document.getElementById("comments").innerHTML+'<img src="'+recieve["photo"]+'" style="width: 32px; height: 32px;">&nbsp;'+recieve["name"]+"<p>"+recieve["comment"]+'<br> Uploaded: '+recieve["time"].charAt(0)+recieve["time"].charAt(1)+':'+recieve["time"].charAt(2)+recieve["time"].charAt(3)+' on '+ month(recieve["date"].charAt(2)+recieve["date"].charAt(3))+' '+recieve["time"].charAt(0)+recieve["time"].charAt(1)+' year '+recieve["date"].charAt(4)+recieve["date"].charAt(5)+recieve["date"].charAt(6)+recieve["date"].charAt(7)+'</div><hr style="width: 100vw;"><div>'
                    } else {
                        
                        kte=false;
                        console.log(kte);
                    }
                }).catch((error) => {
                    console.log(error);
                }); 
                iok=iok+1;
        }
        }).catch((error) => {
            console.log(error);
            location.reload();
        })
        
        function comment(coment) {
            /*intentional spelling error so to not get confused with other comments*/
            var year = new Date().getFullYear().toString();
            var month = new Date().getMonth();
            month=month+1;
            month=month.toString();
            var date = new Date().getDate().toString();
            var hour = new Date().getHours();
            hour = hour+1;
            hour = hour.toString();
            var minute = new Date().getMinutes();
            minute=minute+1;
            minute=minute.toString();
            if (month.length=1) {
                month="0"+month;
            }
            var docRef;
            
            
            db.collection(currentdoc).get().then((doc) => {
                    console.log(doc.docs.length);
                    db.collection(currentdoc).doc('C'+(doc.docs.length+1).toString()).set({
                        "comment":coment,
                        "date":date + month + year,
                        "name": firebase.auth().currentUser.displayName,
                        "photo":firebase.auth().currentUser.photoURL,
                        "time":hour+minute
                    })
                    .then(() => {
                        console.log("document written");
                        location.reload();
                    })
                    .catch((error) => {
                        console.log(error);
                    })
                }).catch((error) => {
                    console.log(error)
                });
            }  
            
    </script>
    <script>
        var loadend=performance.now();
        console.log("loading time is "+(Math.round(loadend-loadstart))+" milliseconds")
    </script>
</body>
</html>